services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
      - "8765:8765" # WebSocket port
    environment:
      - ALPACA_API_KEY=${ALPACA_API_KEY}
      - ALPACA_SECRET_KEY=${ALPACA_SECRET_KEY}
      - ALPACA_ENDPOINT=${ALPACA_ENDPOINT:-https://paper-api.alpaca.markets}
      - ALPACA_STREAM_ENDPOINT=${ALPACA_STREAM_ENDPOINT:-wss://stream.data.alpaca.markets/v2/iex}
      - PINECONE_API_KEY=${PINECONE_API_KEY}
      - PINECONE_ENVIRONMENT=${PINECONE_ENVIRONMENT}
      - PINECONE_INDEX_NAME=${PINECONE_INDEX_NAME:-robin-ai}
      - REDIS_URL=redis://redis:6379
      - OLLAMA_HOST=http://35.202.133.28:11434
      - OLLAMA_CHAT_MODEL=llama3:latest
      - MODEL_NAME=llama3
      - EMBEDDING_MODEL=nomic-embed-text
      - LOG_LEVEL=DEBUG
      - ENABLE_REAL_TIME=true
      - WS_HOST=0.0.0.0
      - WS_PORT=8765
      - PORT=8000
      - SENTENCE_TRANSFORMERS_HOME=/app/model_cache
    volumes:
      - ./backend:/app
      - ./data/pdfs:/app/data/pdfs
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
      market_stream:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  market_stream:
    build:
      context: ./backend
      dockerfile: Dockerfile.stream
    ports:
      - "8001:8001" # Health check and API port
    environment:
      - ALPACA_API_KEY=${ALPACA_API_KEY}
      - ALPACA_SECRET_KEY=${ALPACA_SECRET_KEY}
      - ALPACA_STREAM_ENDPOINT=${ALPACA_STREAM_ENDPOINT:-wss://stream.data.alpaca.markets/v2/iex}
      - REDIS_URL=redis://redis:6379
      - PORT=8001
    volumes:
      - ./backend:/app
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    ports:
      - "3000:3000"
    volumes:
      - ./src:/app/src
      - ./public:/app/public
      - ./package.json:/app/package.json
      - ./tsconfig.json:/app/tsconfig.json
      - ./next.config.js:/app/next.config.js
      - ./postcss.config.js:/app/postcss.config.js
      - ./tailwind.config.js:/app/tailwind.config.js
      - /app/node_modules
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://backend:8000
      - NEXT_PUBLIC_WS_URL=ws://backend:8765
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000" ]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

volumes:
  redis_data:
